name: CI/CD Pipeline - Flag Explorer

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install backend dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run backend linting
      working-directory: backend
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Run backend tests
      working-directory: backend
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml
        
    - name: Upload backend coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Run frontend linting
      working-directory: frontend
      run: npm run lint
      
    - name: Run frontend tests
      working-directory: frontend
      run: npm run test -- --coverage --watchAll=false
      
    - name: Upload frontend coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: frontend/coverage/lcov.info
        flags: frontend

  build-and-package:
    name: Build and Package Applications
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    # Backend Build and Package
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install backend dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create backend package
      working-directory: backend
      run: |
        pip install build
        python -m build
        
    - name: Create backend Docker image
      run: |
        docker build -f backend/Dockerfile -t flag-explorer-backend:${{ github.sha }} backend/
        docker save flag-explorer-backend:${{ github.sha }} > backend-image.tar
        
    # Frontend Build and Package  
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Build frontend application
      working-directory: frontend
      run: |
        npm run build
        npm run export 2>/dev/null || echo "Static export not configured, using standard build"
        
    - name: Create frontend Docker image
      run: |
        docker build -f frontend/Dockerfile -t flag-explorer-frontend:${{ github.sha }} frontend/
        docker save flag-explorer-frontend:${{ github.sha }} > frontend-image.tar
        
    # Create deployment artifacts
    - name: Create deployment package
      run: |
        mkdir -p deployment-package
        cp -r backend/app deployment-package/backend-app
        cp backend/requirements.txt deployment-package/
        cp -r frontend/.next deployment-package/frontend-build 2>/dev/null || cp -r frontend/out deployment-package/frontend-build 2>/dev/null || cp -r frontend/build deployment-package/frontend-build
        cp frontend/package.json deployment-package/
        cp docker-compose.yml deployment-package/ 2>/dev/null || echo "version: '3.8'" > deployment-package/docker-compose.yml
        
    - name: Archive backend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-package
        path: |
          backend/dist/
          backend/requirements.txt
          backend/app/
          backend-image.tar
          
    - name: Archive frontend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-package
        path: |
          frontend/.next/
          frontend/package.json
          frontend/public/
          frontend-image.tar
          
    - name: Archive deployment package
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment-package/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run backend security scan
      working-directory: backend
      run: |
        pip install safety bandit
        safety check -r requirements.txt
        bandit -r app/ -f json -o bandit-report.json || true
        
    - name: Run frontend security scan
      working-directory: frontend
      run: |
        npm audit --audit-level=moderate
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          frontend/npm-audit.json

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-package, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deployment-package
        path: ./deployment
        
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s-staging/ 
        # Example: docker-compose -f deployment/docker-compose.yml up -d
        echo "Staging deployment complete"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-package, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deployment-package
        path: ./deployment
        
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s-production/
        # Example: aws ecs update-service --cluster flag-explorer --service flag-explorer-service
        echo "Production deployment complete"

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ Deployment successful"
          # Add notification logic (Slack, Discord, email, etc.)
        else
          echo "❌ Deployment failed"
          # Add failure notification logic
        fi 