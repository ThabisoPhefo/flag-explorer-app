name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint
      
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --ci --coverage --watchAll=false
      
    - name: Upload frontend test coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests with coverage
      working-directory: ./backend
      run: |
        python3 -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Build Frontend
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: frontend-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Verify build output
      run: |
        echo "Checking frontend build output..."
        ls -la frontend/
        if [ ! -d "frontend/.next" ]; then
          echo "Error: .next directory not found!"
          exit 1
        fi
        if [ ! -d "frontend/public" ]; then
          echo "Error: public directory not found!"
          exit 1
        fi
        echo "✅ Build directories found successfully"
        echo "Contents of .next directory:"
        ls -la frontend/.next/
        echo "Contents of public directory:"
        ls -la frontend/public/
        
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: |
          frontend/.next
          frontend/public
        retention-days: 7
        if-no-files-found: error

  # Build Backend
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: backend-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create backend package
      working-directory: ./backend
      run: |
        # Create a deployment package
        mkdir -p dist
        cp -r app/ dist/
        cp requirements.txt dist/
        cp start_server.py dist/
        
    - name: Verify backend package
      run: |
        echo "Checking backend package..."
        ls -la backend/
        if [ ! -d "backend/dist" ]; then
          echo "Error: dist directory not found!"
          exit 1
        fi
        echo "✅ Backend package created successfully"
        echo "Contents of dist directory:"
        ls -la backend/dist/
        
    - name: Upload backend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/dist
        retention-days: 7
        if-no-files-found: error

  # Package for Deployment
  package-deployment:
    name: Package for Deployment
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: deployment/frontend/
        
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: deployment/backend/
        
    - name: Verify downloaded artifacts
      run: |
        echo "Checking downloaded artifacts..."
        echo "Frontend artifacts:"
        ls -la deployment/frontend/ || echo "No frontend artifacts found"
        echo "Backend artifacts:"
        ls -la deployment/backend/ || echo "No backend artifacts found"
        
    - name: Create deployment package
      run: |
        # Create deployment structure
        mkdir -p deployment-package
        
        # Copy frontend build
        if [ -d "deployment/frontend" ]; then
          cp -r deployment/frontend/ deployment-package/frontend/
          echo "✅ Frontend artifacts copied"
        else
          echo "❌ Frontend artifacts not found"
          exit 1
        fi
        
        # Copy backend build
        if [ -d "deployment/backend" ]; then
          cp -r deployment/backend/ deployment-package/backend/
          echo "✅ Backend artifacts copied"
        else
          echo "❌ Backend artifacts not found"
          exit 1
        fi
        
        # Create deployment scripts
        cat > deployment-package/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Starting Flag Explorer App Deployment"
        
        # Install backend dependencies
        echo "📦 Installing backend dependencies..."
        cd backend
        python3 -m pip install -r requirements.txt
        
        # Start backend server
        echo "🔧 Starting backend server..."
        python3 start_server.py &
        BACKEND_PID=$!
        
        # Wait for backend to be ready
        echo "⏳ Waiting for backend to start..."
        sleep 5
        
        # Install and start frontend (requires Node.js)
        echo "🌐 Starting frontend server..."
        cd ../frontend
        npm install
        npm start &
        FRONTEND_PID=$!
        
        echo "✅ Flag Explorer App is running!"
        echo "   Backend:  http://127.0.0.1:8001"
        echo "   Frontend: http://127.0.0.1:3000"
        echo ""
        echo "Press Ctrl+C to stop the application"
        
        # Wait for interrupt
        trap "echo 'Stopping servers...'; kill $BACKEND_PID $FRONTEND_PID 2>/dev/null; exit" INT
        wait
        EOF
        
        chmod +x deployment-package/deploy.sh
        
        # Create README for deployment
        cat > deployment-package/README.md << 'EOF'
        # Flag Explorer App - Deployment Package
        
        This package contains the built Flag Explorer application with both frontend and backend components.
        
        ## Prerequisites
        - Python 3.11+
        - Node.js 18+
        - npm
        
        ## Quick Start
        ```bash
        ./deploy.sh
        ```
        
        ## Manual Deployment
        
        ### Backend
        ```bash
        cd backend
        pip install -r requirements.txt
        python3 start_server.py
        ```
        
        ### Frontend
        ```bash
        cd frontend
        npm install
        npm start
        ```
        
        ## Application URLs
        - Frontend: http://127.0.0.1:3000
        - Backend API: http://127.0.0.1:8001
        - API Documentation: http://127.0.0.1:8001/docs
        EOF
        
        # Create archive
        ARCHIVE_NAME="flag-explorer-deployment-$(date +%Y%m%d-%H%M%S).tar.gz"
        tar -czf "$ARCHIVE_NAME" deployment-package/
        echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
        
    - name: Verify deployment package
      run: |
        echo "Checking deployment package..."
        ls -la *.tar.gz || echo "No tar.gz files found"
        ls -la deployment-package/ || echo "deployment-package directory not found"
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: ${{ env.ARCHIVE_NAME }}
        retention-days: 30
        if-no-files-found: error

  # Integration Tests (Optional - runs after both services are built)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Start backend server
      working-directory: ./backend
      run: |
        python3 start_server.py &
        echo $! > ../backend.pid
        # Wait for server to start
        sleep 10
        
    - name: Test backend health
      run: |
        curl -f http://127.0.0.1:8001/health || exit 1
        
    - name: Build and test frontend against running backend
      working-directory: ./frontend
      env:
        NEXT_PUBLIC_API_URL: http://127.0.0.1:8001
      run: |
        npm run build
        npm run lint
        
    - name: Stop backend server
      run: |
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
        fi 